type Dentist
@model {
  id: ID
  firstName: String
  lastName: String
  phone: String
  qualifications: String
  bio: String
  website: String
  city: String
  street: String
  postIndex: String
  email: String
  lat: String
  lng: String
  registered: Boolean
  services: [Service] @connection(keyName: "byDentist", fields: ["id"])
  practices: [Practice] @connection(keyName: "byDentist", fields: ["id"])
}

type Service
@model
@key(name: "byDentist", fields: ["dentistId", "name"])
@auth(rules: [{ allow: owner, ownerField: "owner", operations: [create, update, delete] }]) {
  id: ID!
  dentistId: ID!
  name: String!

}

type Practice
@model
@key(name: "byDentist", fields: ["dentistId", "name"])
@auth(rules: [{ allow: owner, ownerField: "owner", operations: [create, update, delete] }]) {
  id: ID!
  dentistId: ID!
  name: String!
}

type Plan
@model(subscriptions: null)
@auth(
  rules: [
    # allow admins to create, update and delete plan
    { allow: groups, groups: ["Admin"] }
    # allow all authenticated users to view plan
    { allow: private, operations: [read] }
    # allow all guest users (not authenticated) to view plan
    { allow: public, operations: [read] }
  ]
) {
  id: ID!
  title: String!
  description: String
  image: String
  author: String
  featured: Boolean
  price: Float
  orders: [PlanOrder] @connection(keyName: "byPlan", fields: ["id"])
}

type PlanOrder
@model(queries: null, subscriptions: null)
@key(name: "byPlan", fields: ["plan_id", "order_id"])
@key(name: "byOrder", fields: ["order_id", "plan_id"])
@auth(
  rules: [
    # allow admins to create planorders for customers by using customer email in lambda
    { allow: owner, identityClaim: "email", ownerField: "customer" }
    { allow: groups, groups: ["Admin"] }
  ]
) {
  id: ID!
  plan_id: ID!
  order_id: ID!
  plan: Plan @connection(fields: ["plan_id"])
  order: Order @connection(fields: ["order_id"])
}

type Order
@model(subscriptions: null)
@auth(
  rules: [
    # only owner can see his orders
    { allow: owner, identityClaim: "email", ownerField: "customer" }
    # allow admins to view orders
    { allow: groups, groups: ["Admin"] }
  ]
)
@key(name: "byDentist", fields: ["dentist"]) {
  id: ID!
  dentist: String!
  date: String
  total: Float
  plans: [PlanOrder] @connection(keyName: "byOrder", fields: ["id"])
}

enum OrderStatus {
  SUCCESS
  FAILED
}

input CartItem {
  id: ID!
  title: String
  image: String
  price: Float
  amount: Int
}

input ProcessOrderInput {
  id: ID!
  cart: [CartItem]
  total: Float!
  token: String!
  address: String
}

type Mutation {
  processOrder(input: ProcessOrderInput!): OrderStatus
  @function(name: "processPayment-${env}")
  @function(name: "createOrder-${env}")
}

type Query {
  searchCoordDentists(lat: Float, lng: Float): Dentist
  @function(name: "dentalSearch-${env}")
}